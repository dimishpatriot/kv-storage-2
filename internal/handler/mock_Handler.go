// Code generated by mockery v2.33.2. DO NOT EDIT.

package handler

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockHandler) Delete(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockHandler_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockHandler_Delete_Call {
	return &MockHandler_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockHandler_Delete_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_Delete_Call) Return() *MockHandler_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Delete_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockHandler) Get(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockHandler_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockHandler_Get_Call {
	return &MockHandler_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockHandler_Get_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_Get_Call) Return() *MockHandler_Get_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Get_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockHandler_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *MockHandler) Put(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockHandler_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockHandler_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockHandler_Expecter) Put(_a0 interface{}, _a1 interface{}) *MockHandler_Put_Call {
	return &MockHandler_Put_Call{Call: _e.mock.On("Put", _a0, _a1)}
}

func (_c *MockHandler_Put_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockHandler_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_Put_Call) Return() *MockHandler_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Put_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockHandler_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
