// Code generated by mockery v2.33.2. DO NOT EDIT.

package transactionlogger

import mock "github.com/stretchr/testify/mock"

// MockTransactionLogger is an autogenerated mock type for the TransactionLogger type
type MockTransactionLogger struct {
	mock.Mock
}

type MockTransactionLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionLogger) EXPECT() *MockTransactionLogger_Expecter {
	return &MockTransactionLogger_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with given fields:
func (_m *MockTransactionLogger) Err() <-chan error {
	ret := _m.Called()

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// MockTransactionLogger_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockTransactionLogger_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockTransactionLogger_Expecter) Err() *MockTransactionLogger_Err_Call {
	return &MockTransactionLogger_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockTransactionLogger_Err_Call) Run(run func()) *MockTransactionLogger_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionLogger_Err_Call) Return(_a0 <-chan error) *MockTransactionLogger_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionLogger_Err_Call) RunAndReturn(run func() <-chan error) *MockTransactionLogger_Err_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEvents provides a mock function with given fields:
func (_m *MockTransactionLogger) ReadEvents() (<-chan Event, <-chan error) {
	ret := _m.Called()

	var r0 <-chan Event
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func() (<-chan Event, <-chan error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() <-chan Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Event)
		}
	}

	if rf, ok := ret.Get(1).(func() <-chan error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// MockTransactionLogger_ReadEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEvents'
type MockTransactionLogger_ReadEvents_Call struct {
	*mock.Call
}

// ReadEvents is a helper method to define mock.On call
func (_e *MockTransactionLogger_Expecter) ReadEvents() *MockTransactionLogger_ReadEvents_Call {
	return &MockTransactionLogger_ReadEvents_Call{Call: _e.mock.On("ReadEvents")}
}

func (_c *MockTransactionLogger_ReadEvents_Call) Run(run func()) *MockTransactionLogger_ReadEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionLogger_ReadEvents_Call) Return(_a0 <-chan Event, _a1 <-chan error) *MockTransactionLogger_ReadEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTransactionLogger_ReadEvents_Call) RunAndReturn(run func() (<-chan Event, <-chan error)) *MockTransactionLogger_ReadEvents_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields:
func (_m *MockTransactionLogger) Run() {
	_m.Called()
}

// MockTransactionLogger_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockTransactionLogger_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockTransactionLogger_Expecter) Run() *MockTransactionLogger_Run_Call {
	return &MockTransactionLogger_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockTransactionLogger_Run_Call) Run(run func()) *MockTransactionLogger_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTransactionLogger_Run_Call) Return() *MockTransactionLogger_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionLogger_Run_Call) RunAndReturn(run func()) *MockTransactionLogger_Run_Call {
	_c.Call.Return(run)
	return _c
}

// WriteDelete provides a mock function with given fields: key
func (_m *MockTransactionLogger) WriteDelete(key string) {
	_m.Called(key)
}

// MockTransactionLogger_WriteDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteDelete'
type MockTransactionLogger_WriteDelete_Call struct {
	*mock.Call
}

// WriteDelete is a helper method to define mock.On call
//   - key string
func (_e *MockTransactionLogger_Expecter) WriteDelete(key interface{}) *MockTransactionLogger_WriteDelete_Call {
	return &MockTransactionLogger_WriteDelete_Call{Call: _e.mock.On("WriteDelete", key)}
}

func (_c *MockTransactionLogger_WriteDelete_Call) Run(run func(key string)) *MockTransactionLogger_WriteDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTransactionLogger_WriteDelete_Call) Return() *MockTransactionLogger_WriteDelete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionLogger_WriteDelete_Call) RunAndReturn(run func(string)) *MockTransactionLogger_WriteDelete_Call {
	_c.Call.Return(run)
	return _c
}

// WritePut provides a mock function with given fields: key, value
func (_m *MockTransactionLogger) WritePut(key string, value string) {
	_m.Called(key, value)
}

// MockTransactionLogger_WritePut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WritePut'
type MockTransactionLogger_WritePut_Call struct {
	*mock.Call
}

// WritePut is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockTransactionLogger_Expecter) WritePut(key interface{}, value interface{}) *MockTransactionLogger_WritePut_Call {
	return &MockTransactionLogger_WritePut_Call{Call: _e.mock.On("WritePut", key, value)}
}

func (_c *MockTransactionLogger_WritePut_Call) Run(run func(key string, value string)) *MockTransactionLogger_WritePut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockTransactionLogger_WritePut_Call) Return() *MockTransactionLogger_WritePut_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTransactionLogger_WritePut_Call) RunAndReturn(run func(string, string)) *MockTransactionLogger_WritePut_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionLogger creates a new instance of MockTransactionLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionLogger {
	mock := &MockTransactionLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
